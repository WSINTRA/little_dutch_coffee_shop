{"ast":null,"code":"var _jsxFileName = \"/Users/Music_Studio/Development/MyProjects/store_analytic_project_FE-master/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport Home from './components/Home';\nimport Footer from './components/Footer';\nconst Url = 'https://secret-savannah-72600.herokuapp.com/category';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userData: null,\n      frontAd: []\n    };\n\n    this.changeFrontPage = frontAd => {\n      this.setState({\n        frontAd: frontAd\n      });\n    };\n\n    this.createNewEmployee = customer => {\n      if (customer.password === customer.confirmPass) {\n        fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/users\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          },\n          body: JSON.stringify({\n            first_name: customer.firstName,\n            email: customer.email,\n            last_name: customer.lastName,\n            password: customer.password,\n            street_address: customer.streetAddr,\n            telephone: customer.telephone,\n            state: customer.usState,\n            admin: customer.admin,\n            employee: customer.employee\n          })\n        }).then(res => {\n          if (!res.ok) {\n            const error = new Error(res);\n            error.message = res.statusText;\n            error.name = res.status;\n            alert(error);\n          } else {\n            return res.json().then(userData => {\n              alert(\"New Employee Created\");\n            });\n          }\n        });\n      } else alert(\"Confirm password does not match!\");\n    };\n\n    this.createNewCustomer = customer => {\n      if (customer.password === customer.confirmPass) {\n        fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/users\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\"\n          },\n          body: JSON.stringify({\n            first_name: customer.firstName,\n            email: customer.email,\n            last_name: customer.lastName,\n            password: customer.password,\n            street_address: customer.streetAddr,\n            telephone: customer.telephone,\n            state: customer.usState\n          })\n        }).then(res => {\n          if (!res.ok) {\n            const error = new Error(res);\n            error.message = res.statusText;\n            error.name = res.status;\n            alert(error);\n          } else {\n            return res.json().then(userData => {\n              localStorage.setItem(\"myJWT\", userData.jwt); // this.props.loadCart(userData.cart)\n\n              this.setState({\n                userData: userData.user\n              });\n            });\n          }\n        });\n      } else alert(\"Confirm password does not match!\");\n    };\n\n    this.logout = () => {\n      this.setState({\n        userData: null\n      });\n      localStorage.clear();\n    };\n\n    this.loginSubmit = props => {\n      fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          email: props.email,\n          password: props.password\n        })\n      }).then(res => {\n        if (!res.ok) {\n          const error = new Error(res);\n          error.message = res.statusText;\n          error.name = res.status;\n          alert(error);\n        } else {\n          return res.json().then(userData => {\n            localStorage.setItem(\"myJWT\", userData.jwt);\n            this.props.loadCart(userData.auth.cart);\n            this.setState({\n              userData: userData.auth\n            });\n          });\n        }\n      });\n    };\n\n    this.saveOrder = order => {\n      fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/updateCart\", {\n        method: \"PATCH\",\n        headers: {\n          Authorization: \"Bearer \".concat(localStorage.myJWT),\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          user: this.state.userData,\n          order: order\n        })\n      });\n    };\n\n    this.secureCheckout = (order, price) => {\n      this.state.userData ? fetch('https://secret-savannah-72600.herokuapp.com/orders', {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \".concat(localStorage.myJWT),\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          order: order,\n          total: price,\n          user: this.state.userData\n        })\n      }).then(res => res.json()).then(purchases => this.setState({\n        order: {\n          purchases: purchases,\n          total: price\n        }\n      }), this.props.clearCart()) : alert(\"Please sign up or login to make an order.\");\n    };\n\n    this.clearOrderState = () => {\n      this.setState({\n        order: null\n      });\n    };\n  }\n\n  componentDidMount() {\n    fetch(Url).then(res => res.json()).then(response => {\n      this.props.addProducts(response);\n    });\n    fetch(\"https://secret-savannah-72600.herokuapp.com/frontad\").then(res => res.json()).then(response => {\n      this.setState({\n        frontAd: response\n      });\n    });\n\n    if (localStorage.myJWT) {\n      fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/profile\", {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \".concat(localStorage.myJWT)\n        }\n      }).then(res => {\n        if (!res.ok) {\n          console.log(\"not logged in\", res);\n        }\n\n        return res.json();\n      }).then(res => {\n        this.props.loadCart(res.user.cart);\n        this.setState({\n          userData: res.user\n        });\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App Site\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Site-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Home, {\n      changeFrontPage: this.changeFrontPage,\n      frontAd: this.state.frontAd,\n      logout: this.logout,\n      user: this.state.userData,\n      login: this.loginSubmit,\n      secureCheckout: this.secureCheckout,\n      order: this.state.order,\n      clearOrderState: this.clearOrderState,\n      saveOrder: this.saveOrder,\n      createNewCustomer: this.createNewCustomer,\n      createNewEmployee: this.createNewEmployee,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mdp = dispatch => {\n  return {\n    loadCart: item => {\n      dispatch({\n        type: \"LOAD_CART\",\n        payload: item\n      });\n    },\n    addProducts: response => {\n      dispatch({\n        type: \"FIRST_FETCH\",\n        payload: response\n      });\n    },\n    clearCart: () => {\n      dispatch({\n        type: \"CLEAR_CART\",\n        payload: null\n      });\n    }\n  };\n};\n\nexport default connect(null, mdp)(App);","map":{"version":3,"sources":["/Users/Music_Studio/Development/MyProjects/store_analytic_project_FE-master/src/App.js"],"names":["React","connect","Home","Footer","Url","App","Component","state","userData","frontAd","changeFrontPage","setState","createNewEmployee","customer","password","confirmPass","fetch","method","headers","Accept","body","JSON","stringify","first_name","firstName","email","last_name","lastName","street_address","streetAddr","telephone","usState","admin","employee","then","res","ok","error","Error","message","statusText","name","status","alert","json","createNewCustomer","localStorage","setItem","jwt","user","logout","clear","loginSubmit","props","loadCart","auth","cart","saveOrder","order","Authorization","myJWT","secureCheckout","price","total","purchases","clearCart","clearOrderState","componentDidMount","response","addProducts","console","log","render","mdp","dispatch","item","type","payload"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,MAAMC,GAAG,GAAG,sDAAZ;;AACA,MAAMC,GAAN,SAAkBL,KAAK,CAACM,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAElCC,KAFkC,GAE1B;AACLC,MAAAA,QAAQ,EAAE,IADL;AAELC,MAAAA,OAAO,EAAE;AAFJ,KAF0B;;AAAA,SAOlCC,eAPkC,GAOfD,OAAD,IAAa;AAC7B,WAAKE,QAAL,CAAc;AACZF,QAAAA,OAAO,EAACA;AADI,OAAd;AAGD,KAXiC;;AAAA,SAgDlCG,iBAhDkC,GAgDbC,QAAD,IAAc;AAChC,UAAIA,QAAQ,CAACC,QAAT,KAAsBD,QAAQ,CAACE,WAAnC,EAAgD;AAC7CC,QAAAA,KAAK,CAAC,0DAAD,EAA4D;AAChEC,UAAAA,MAAM,EAAE,MADwD;AAE1DC,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAELC,YAAAA,MAAM,EAAE;AAFH,WAFiD;AAM1DC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,YAAAA,UAAU,EAAEV,QAAQ,CAACW,SADJ;AAEjBC,YAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFC;AAGjBC,YAAAA,SAAS,EAAEb,QAAQ,CAACc,QAHH;AAIjBb,YAAAA,QAAQ,EAAED,QAAQ,CAACC,QAJF;AAKjBc,YAAAA,cAAc,EAAEf,QAAQ,CAACgB,UALR;AAMjBC,YAAAA,SAAS,EAAEjB,QAAQ,CAACiB,SANH;AAOjBvB,YAAAA,KAAK,EAAEM,QAAQ,CAACkB,OAPC;AAQjBC,YAAAA,KAAK,EAAEnB,QAAQ,CAACmB,KARC;AASjBC,YAAAA,QAAQ,EAAEpB,QAAQ,CAACoB;AATF,WAAf;AANoD,SAA5D,CAAL,CAiBUC,IAjBV,CAiBeC,GAAG,IAAI;AACf,cAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,kBAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAd;AACAE,YAAAA,KAAK,CAACE,OAAN,GAAgBJ,GAAG,CAACK,UAApB;AACAH,YAAAA,KAAK,CAACI,IAAN,GAAaN,GAAG,CAACO,MAAjB;AACAC,YAAAA,KAAK,CAACN,KAAD,CAAL;AACH,WALD,MAMK;AACH,mBAAOF,GAAG,CAACS,IAAJ,GAAWV,IAAX,CAAgB1B,QAAQ,IAAI;AACrCmC,cAAAA,KAAK,CAAC,sBAAD,CAAL;AACP,aAFgB,CAAP;AAGD;AACA,SA7BR;AA8BF,OA/BD,MAgCKA,KAAK,CAAC,kCAAD,CAAL;AACN,KAlFiC;;AAAA,SAmFlCE,iBAnFkC,GAmFbhC,QAAD,IAAc;AAEhC,UAAIA,QAAQ,CAACC,QAAT,KAAsBD,QAAQ,CAACE,WAAnC,EAAgD;AAC7CC,QAAAA,KAAK,CAAC,0DAAD,EAA4D;AAChEC,UAAAA,MAAM,EAAE,MADwD;AAE1DC,UAAAA,OAAO,EAAE;AACL,4BAAgB,kBADX;AAELC,YAAAA,MAAM,EAAE;AAFH,WAFiD;AAM1DC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,YAAAA,UAAU,EAAEV,QAAQ,CAACW,SADJ;AAEjBC,YAAAA,KAAK,EAAEZ,QAAQ,CAACY,KAFC;AAGjBC,YAAAA,SAAS,EAAEb,QAAQ,CAACc,QAHH;AAIjBb,YAAAA,QAAQ,EAAED,QAAQ,CAACC,QAJF;AAKjBc,YAAAA,cAAc,EAAEf,QAAQ,CAACgB,UALR;AAMjBC,YAAAA,SAAS,EAAEjB,QAAQ,CAACiB,SANH;AAOjBvB,YAAAA,KAAK,EAAEM,QAAQ,CAACkB;AAPC,WAAf;AANoD,SAA5D,CAAL,CAeUG,IAfV,CAeeC,GAAG,IAAI;AACf,cAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,kBAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAd;AACAE,YAAAA,KAAK,CAACE,OAAN,GAAgBJ,GAAG,CAACK,UAApB;AACAH,YAAAA,KAAK,CAACI,IAAN,GAAaN,GAAG,CAACO,MAAjB;AACAC,YAAAA,KAAK,CAACN,KAAD,CAAL;AACH,WALD,MAMK;AACH,mBAAOF,GAAG,CAACS,IAAJ,GAAWV,IAAX,CAAgB1B,QAAQ,IAAI;AACrCsC,cAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BvC,QAAQ,CAACwC,GAAvC,EADqC,CAErC;;AACA,mBAAKrC,QAAL,CAAc;AACVH,gBAAAA,QAAQ,EAAEA,QAAQ,CAACyC;AADT,eAAd;AAGP,aANgB,CAAP;AAOD;AACA,SA/BR;AAgCF,OAjCD,MAkCKN,KAAK,CAAC,kCAAD,CAAL;AACN,KAxHiC;;AAAA,SA0HlCO,MA1HkC,GA0HzB,MAAM;AACb,WAAKvC,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAE;AADE,OAAd;AAGAsC,MAAAA,YAAY,CAACK,KAAb;AACD,KA/HiC;;AAAA,SAiIlCC,WAjIkC,GAiIpBC,KAAK,IAAI;AACfrC,MAAAA,KAAK,CAAC,0DAAD,EAA6D;AAC9DC,QAAAA,MAAM,EAAE,MADsD;AAE9DC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAELC,UAAAA,MAAM,EAAE;AAFH,SAFqD;AAM9DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBG,UAAAA,KAAK,EAAE4B,KAAK,CAAC5B,KADI;AAEjBX,UAAAA,QAAQ,EAAEuC,KAAK,CAACvC;AAFC,SAAf;AANwD,OAA7D,CAAL,CAUGoB,IAVH,CAUQC,GAAG,IAAI;AACX,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,gBAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAd;AACAE,UAAAA,KAAK,CAACE,OAAN,GAAgBJ,GAAG,CAACK,UAApB;AACAH,UAAAA,KAAK,CAACI,IAAN,GAAaN,GAAG,CAACO,MAAjB;AACAC,UAAAA,KAAK,CAACN,KAAD,CAAL;AACH,SALD,MAMK;AACH,iBAAOF,GAAG,CAACS,IAAJ,GAAWV,IAAX,CAAgB1B,QAAQ,IAAI;AACrCsC,YAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BvC,QAAQ,CAACwC,GAAvC;AACA,iBAAKK,KAAL,CAAWC,QAAX,CAAoB9C,QAAQ,CAAC+C,IAAT,CAAcC,IAAlC;AACA,iBAAK7C,QAAL,CAAc;AACVH,cAAAA,QAAQ,EAAEA,QAAQ,CAAC+C;AADT,aAAd;AAGP,WANgB,CAAP;AAOD;AACA,OA1BL;AA2BE,KA7JwB;;AAAA,SA8JlCE,SA9JkC,GA8JrBC,KAAD,IAAW;AACrB1C,MAAAA,KAAK,CAAC,+DAAD,EAAkE;AAC7DC,QAAAA,MAAM,EAAE,OADqD;AAE7DC,QAAAA,OAAO,EAAE;AACLyC,UAAAA,aAAa,mBAAYb,YAAY,CAACc,KAAzB,CADR;AAEL,0BAAgB,kBAFX;AAGLzC,UAAAA,MAAM,EAAE;AAHH,SAFoD;AAO7DC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB2B,UAAAA,IAAI,EAAE,KAAK1C,KAAL,CAAWC,QADA;AAEjBkD,UAAAA,KAAK,EAAEA;AAFU,SAAf;AAPuD,OAAlE,CAAL;AAYD,KA3KiC;;AAAA,SA6KlCG,cA7KkC,GA6KjB,CAACH,KAAD,EAAQI,KAAR,KAAkB;AAEnC,WAAKvD,KAAL,CAAWC,QAAX,GACEQ,KAAK,CAAC,oDAAD,EAAuD;AAC1DC,QAAAA,MAAM,EAAE,MADkD;AAE1DC,QAAAA,OAAO,EAAE;AACLyC,UAAAA,aAAa,mBAAYb,YAAY,CAACc,KAAzB,CADR;AAEN,0BAAgB,kBAFV;AAGGzC,UAAAA,MAAM,EAAE;AAHX,SAFiD;AAO/CC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBoC,UAAAA,KAAK,EAAEA,KADa;AAEpBK,UAAAA,KAAK,EAAED,KAFa;AAGpBb,UAAAA,IAAI,EAAE,KAAK1C,KAAL,CAAWC;AAHG,SAAf;AAPyC,OAAvD,CAAL,CAYG0B,IAZH,CAYQC,GAAG,IAAIA,GAAG,CAACS,IAAJ,EAZf,EAaCV,IAbD,CAaM8B,SAAS,IAAG,KAAKrD,QAAL,CAAc;AAC9B+C,QAAAA,KAAK,EAAE;AACCM,UAAAA,SAAS,EAAEA,SADZ;AAECD,UAAAA,KAAK,EAAED;AAFR;AADuB,OAAd,CAblB,EAmBA,KAAKT,KAAL,CAAWY,SAAX,EAnBA,CADF,GAsBEtB,KAAK,CAAC,2CAAD,CAtBP;AAuBC,KAtMiC;;AAAA,SAwMlCuB,eAxMkC,GAwMlB,MAAK;AACnB,WAAKvD,QAAL,CAAc;AACZ+C,QAAAA,KAAK,EAAE;AADK,OAAd;AAGD,KA5MiC;AAAA;;AAalCS,EAAAA,iBAAiB,GAAG;AACpBnD,IAAAA,KAAK,CAACZ,GAAD,CAAL,CAAW8B,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACS,IAAJ,EAAvB,EACCV,IADD,CACMkC,QAAQ,IAAI;AAChB,WAAKf,KAAL,CAAWgB,WAAX,CAAuBD,QAAvB;AACD,KAHD;AAIApD,IAAAA,KAAK,CAAC,qDAAD,CAAL,CACCkB,IADD,CACMC,GAAG,IAAIA,GAAG,CAACS,IAAJ,EADb,EAECV,IAFD,CAEMkC,QAAQ,IAAI;AAChB,WAAKzD,QAAL,CAAc;AACZF,QAAAA,OAAO,EAAC2D;AADI,OAAd;AAGD,KAND;;AAQA,QAAItB,YAAY,CAACc,KAAjB,EAAwB;AACZ5C,MAAAA,KAAK,CAAC,4DAAD,EAA+D;AAChEC,QAAAA,MAAM,EAAE,KADwD;AAEhEC,QAAAA,OAAO,EAAE;AACTyC,UAAAA,aAAa,mBAAYb,YAAY,CAACc,KAAzB;AADJ;AAFuD,OAA/D,CAAL,CAKG1B,IALH,CAKQC,GAAG,IAAI;AACX,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACTkC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BpC,GAA7B;AACH;;AACD,eAAOA,GAAG,CAACS,IAAJ,EAAP;AACH,OAVD,EAUGV,IAVH,CAUQC,GAAG,IAAI;AAEb,aAAKkB,KAAL,CAAWC,QAAX,CAAoBnB,GAAG,CAACc,IAAJ,CAASO,IAA7B;AACM,aAAK7C,QAAL,CAAc;AACdH,UAAAA,QAAQ,EAAE2B,GAAG,CAACc;AADA,SAAd;AAGP,OAhBD;AAiBH;AAER;;AAgKDuB,EAAAA,MAAM,GAAG;AACR,WACD;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACQ;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADN,EAIY;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AACE,MAAA,eAAe,EAAE,KAAK9D,eADxB;AAEE,MAAA,OAAO,EAAE,KAAKH,KAAL,CAAWE,OAFtB;AAGE,MAAA,MAAM,EAAE,KAAKyC,MAHf;AAIE,MAAA,IAAI,EAAE,KAAK3C,KAAL,CAAWC,QAJnB;AAKE,MAAA,KAAK,EAAE,KAAK4C,WALd;AAME,MAAA,cAAc,EAAE,KAAKS,cANvB;AAOE,MAAA,KAAK,EAAE,KAAKtD,KAAL,CAAWmD,KAPpB;AAQE,MAAA,eAAe,EAAE,KAAKQ,eARxB;AASE,MAAA,SAAS,EAAE,KAAKT,SATlB;AAUE,MAAA,iBAAiB,EAAE,KAAKZ,iBAV1B;AAWE,MAAA,iBAAiB,EAAE,KAAKjC,iBAX1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAJZ,CADR,EAoBQ,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBR,CADC;AAwBE;;AAvO+B;;AA2OlC,MAAM6D,GAAG,GAAGC,QAAQ,IAAI;AACtB,SAAO;AACLpB,IAAAA,QAAQ,EAAGqB,IAAD,IAAS;AACjBD,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,WAAN;AAAmBC,QAAAA,OAAO,EAACF;AAA3B,OAAD,CAAR;AACD,KAHI;AAILN,IAAAA,WAAW,EAAGD,QAAD,IAAa;AACxBM,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,aAAN;AAAqBC,QAAAA,OAAO,EAACT;AAA7B,OAAD,CAAR;AACD,KANI;AAOLH,IAAAA,SAAS,EAAE,MAAK;AACdS,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,YAAN;AAAoBC,QAAAA,OAAO,EAAC;AAA5B,OAAD,CAAR;AACD;AATI,GAAP;AAWD,CAZD;;AAeA,eAAe5E,OAAO,CAAC,IAAD,EAAMwE,GAAN,CAAP,CAAkBpE,GAAlB,CAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux'\nimport Home from './components/Home'\nimport Footer from './components/Footer'\n\nconst Url = 'https://secret-savannah-72600.herokuapp.com/category'\nclass App extends React.Component {\n\nstate = {\n   userData: null,\n   frontAd: [],\n}\n\nchangeFrontPage = (frontAd) => {\n  this.setState({\n    frontAd:frontAd\n  })\n}\n\ncomponentDidMount() {\nfetch(Url).then(res => res.json())\n.then(response => {\n  this.props.addProducts(response)\n})\nfetch(\"https://secret-savannah-72600.herokuapp.com/frontad\")\n.then(res => res.json() )\n.then(response => {\n  this.setState({\n    frontAd:response\n  })\n})\n\nif (localStorage.myJWT) {\n            fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/profile\", {\n                method: \"GET\",\n                headers: {\n                Authorization: `Bearer ${localStorage.myJWT}`\n                }\n            }).then(res => {\n                if (!res.ok) {\n                    console.log(\"not logged in\", res);\n                }\n                return res.json()\n            }).then(res => {\n             \n              this.props.loadCart(res.user.cart)\n                    this.setState({\n                    userData: res.user,\n                })\n            })\n        }\n\n}\n\ncreateNewEmployee = (customer) => {\n  if (customer.password === customer.confirmPass) {\n     fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/users\",{\n      method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n                first_name: customer.firstName,\n                email: customer.email,\n                last_name: customer.lastName,\n                password: customer.password,\n                street_address: customer.streetAddr,\n                telephone: customer.telephone,\n                state: customer.usState,\n                admin: customer.admin,\n                employee: customer.employee\n             })\n            }).then(res => {\n            if (!res.ok) {\n                const error = new Error(res)\n                error.message = res.statusText\n                error.name = res.status\n                alert(error)\n            }\n            else {\n              return res.json().then(userData => {\n            alert(\"New Employee Created\")\n    } )\n            } \n            })\n  }\n  else alert(\"Confirm password does not match!\")\n}\ncreateNewCustomer = (customer) => {\n  \n  if (customer.password === customer.confirmPass) {\n     fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/users\",{\n      method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n                first_name: customer.firstName,\n                email: customer.email,\n                last_name: customer.lastName,\n                password: customer.password,\n                street_address: customer.streetAddr,\n                telephone: customer.telephone,\n                state: customer.usState\n             })\n            }).then(res => {\n            if (!res.ok) {\n                const error = new Error(res)\n                error.message = res.statusText\n                error.name = res.status\n                alert(error)\n            }\n            else {\n              return res.json().then(userData => {\n            localStorage.setItem(\"myJWT\", userData.jwt)\n            // this.props.loadCart(userData.cart)\n            this.setState({\n                userData: userData.user\n            })\n    } )\n            } \n            })\n  }\n  else alert(\"Confirm password does not match!\")\n}\n\nlogout = () => {\n  this.setState({\n    userData: null\n  })\n  localStorage.clear()\n}\n\nloginSubmit = props => {\n        fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n                email: props.email,\n                password: props.password\n            })\n        }).then(res => {\n            if (!res.ok) {\n                const error = new Error(res)\n                error.message = res.statusText\n                error.name = res.status\n                alert(error)\n            }\n            else {\n              return res.json().then(userData => {\n            localStorage.setItem(\"myJWT\", userData.jwt)\n            this.props.loadCart(userData.auth.cart)\n            this.setState({\n                userData: userData.auth,\n            })\n    } )\n            } \n            })\n         }\nsaveOrder = (order) => {\n  fetch(\"https://secret-savannah-72600.herokuapp.com/api/v1/updateCart\", {\n            method: \"PATCH\",\n            headers: {\n                Authorization: `Bearer ${localStorage.myJWT}`,\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n            },\n            body: JSON.stringify({\n                user: this.state.userData,\n                order: order\n            })\n        })\n}\n\nsecureCheckout = (order, price) => {\n\nthis.state.userData ? \n  fetch('https://secret-savannah-72600.herokuapp.com/orders', {\n    method: \"POST\",\n    headers: {\n        Authorization: `Bearer ${localStorage.myJWT}`,\n       \"Content-Type\": \"application/json\",\n                Accept: \"application/json\"\n              },\n               body: JSON.stringify({\n                order: order,\n                total: price,\n                user: this.state.userData\n               })\n  }).then(res => res.json() )\n  .then(purchases=> this.setState({\n    order: { \n            purchases: purchases,\n            total: price\n          }\n  }),\n  this.props.clearCart() \n  ) : \n  alert(\"Please sign up or login to make an order.\")\n}\n\nclearOrderState=()=> {\n  this.setState({\n    order: null\n  })\n}\n\nrender() {\n return (\n<div className=\"App Site\">\n        <div className=\"Site-content\">\n              <div className=\"App-header\">\n              \n              </div>\n                    <div className=\"main\">\n                        <Home \n                          changeFrontPage={this.changeFrontPage}\n                          frontAd={this.state.frontAd}\n                          logout={this.logout}\n                          user={this.state.userData}\n                          login={this.loginSubmit}\n                          secureCheckout={this.secureCheckout}\n                          order={this.state.order}\n                          clearOrderState={this.clearOrderState}\n                          saveOrder={this.saveOrder}\n                          createNewCustomer={this.createNewCustomer}\n                          createNewEmployee={this.createNewEmployee}/>\n                    </div>\n        </div>\n        <Footer />\n</div>\n  );\n  }\n \n}\n\nconst mdp = dispatch => {\n  return {\n    loadCart: (item)=> {\n      dispatch({type:\"LOAD_CART\", payload:item})\n    },\n    addProducts: (response)=> {\n      dispatch({type:\"FIRST_FETCH\", payload:response})\n    },\n    clearCart: ()=> {\n      dispatch({type:\"CLEAR_CART\", payload:null})\n    }\n  }\n}\n\n\nexport default connect(null,mdp)(App);\n"]},"metadata":{},"sourceType":"module"}