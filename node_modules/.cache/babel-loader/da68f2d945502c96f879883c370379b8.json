{"ast":null,"code":"import _slicedToArray from \"/Users/Music_Studio/Development/MyProjects/BlueRica/store_front/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Music_Studio/Development/MyProjects/BlueRica/store_front/src/LineChart.js\";\n// PlayGround for data\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst lineDataObject = [{\n  name: \"Amsterdams Finest\",\n  total: 0\n}, {\n  name: \"Brooklyn baby\",\n  total: 0\n}, {\n  name: \"Cali Cup\",\n  total: 0\n}, {\n  name: \"Canna Cup\",\n  total: 0\n}, {\n  name: \"Homegrown small-batch\",\n  total: 0\n}, {\n  name: \"New Strains\",\n  total: 0\n}, {\n  name: \"2019\",\n  total: 0\n}];\n\nconst buildAnewObject = (categories, daily) => {\n  let sortedCategories = {};\n  categories.forEach(cat => {\n    sortedCategories[cat.category_name] = {\n      products: []\n    };\n  });\n  categories.forEach(cat => {\n    cat.products.forEach(product => {\n      sortedCategories[cat.category_name].products.push(product.id);\n    });\n  });\n  let entries = Object.entries(sortedCategories);\n  let lineData = {};\n  daily.forEach(sale => {\n    sale.purchases.forEach(product => {\n      for (const _ref of entries) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        const strain = _ref2[0];\n        const count = _ref2[1];\n        count.products.forEach(num => {\n          if (num === product.product_id) {\n            //Finds matches between daily sales and categories                        \n            lineData[strain] = lineData[strain] ? lineData[strain] + 1 : 1;\n          }\n        });\n      }\n    });\n  });\n  lineDataObject.forEach(line => {\n    if (lineData[line.name]) line.total = lineData[line.name];\n  });\n};\n\nconst DataWork = props => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \" \", buildAnewObject(props.categories, props.daysOrders), props.saveDailyData(lineDataObject), React.createElement(LineChart, {\n    width: 600,\n    height: 300,\n    data: lineDataObject,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"total\",\n    stroke: \"#8884d8\",\n    activeDot: {\n      r: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  })));\n};\n\nconst msp = state => {\n  return {\n    categories: state.category,\n    orders: state.latestOrders,\n    daysOrders: state.daysOrders // dailyData: state.dailyDatas\n\n  };\n};\n\nconst mdp = dispatch => {\n  return {\n    saveDailyData: item => {\n      dispatch({\n        type: \"SAVE_DAILY_DATA\",\n        payload: item\n      });\n    }\n  };\n};\n\nexport default connect(msp, mdp)(DataWork); //So now I have all my orders and a list of all my products..\n//Next thing to do is arrange the data so that I can get the category for each product sold.\n//Iterate over every sale in the last 24 hours..","map":{"version":3,"sources":["/Users/Music_Studio/Development/MyProjects/BlueRica/store_front/src/LineChart.js"],"names":["React","connect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","lineDataObject","name","total","buildAnewObject","categories","daily","sortedCategories","forEach","cat","category_name","products","product","push","id","entries","Object","lineData","sale","purchases","strain","count","num","product_id","line","DataWork","props","daysOrders","saveDailyData","top","right","left","bottom","r","msp","state","category","orders","latestOrders","mdp","dispatch","item","type","payload"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,SADF,EACaC,IADb,EACmBC,KADnB,EAC0BC,KAD1B,EACiCC,aADjC,EACgDC,OADhD,EACyDC,MADzD,QAEO,UAFP;AAMA,MAAMC,cAAc,GAAG,CACvB;AACCC,EAAAA,IAAI,EAAE,mBADP;AAC4BC,EAAAA,KAAK,EAAE;AADnC,CADuB,EAIvB;AACCD,EAAAA,IAAI,EAAE,eADP;AACwBC,EAAAA,KAAK,EAAE;AAD/B,CAJuB,EAOvB;AACCD,EAAAA,IAAI,EAAE,UADP;AACmBC,EAAAA,KAAK,EAAE;AAD1B,CAPuB,EAUvB;AACCD,EAAAA,IAAI,EAAE,WADP;AACoBC,EAAAA,KAAK,EAAE;AAD3B,CAVuB,EAavB;AACCD,EAAAA,IAAI,EAAE,uBADP;AACgCC,EAAAA,KAAK,EAAE;AADvC,CAbuB,EAgBvB;AACCD,EAAAA,IAAI,EAAE,aADP;AACsBC,EAAAA,KAAK,EAAE;AAD7B,CAhBuB,EAmBvB;AACCD,EAAAA,IAAI,EAAE,MADP;AACeC,EAAAA,KAAK,EAAE;AADtB,CAnBuB,CAAvB;;AAwBA,MAAMC,eAAe,GAAG,CAACC,UAAD,EAAYC,KAAZ,KAAsB;AAC9C,MAAIC,gBAAgB,GAAG,EAAvB;AACAF,EAAAA,UAAU,CAACG,OAAX,CAAoBC,GAAD,IAAQ;AACzBF,IAAAA,gBAAgB,CAACE,GAAG,CAACC,aAAL,CAAhB,GAAsC;AAACC,MAAAA,QAAQ,EAAC;AAAV,KAAtC;AACD,GAFD;AAGAN,EAAAA,UAAU,CAACG,OAAX,CAAoBC,GAAD,IAAQ;AACzBA,IAAAA,GAAG,CAACE,QAAJ,CAAaH,OAAb,CAAqBI,OAAO,IAAE;AAC5BL,MAAAA,gBAAgB,CAACE,GAAG,CAACC,aAAL,CAAhB,CAAoCC,QAApC,CAA6CE,IAA7C,CAAkDD,OAAO,CAACE,EAA1D;AACD,KAFD;AAGD,GAJD;AAKA,MAAIC,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAeR,gBAAf,CAAd;AACA,MAAIU,QAAQ,GAAG,EAAf;AACAX,EAAAA,KAAK,CAACE,OAAN,CAAeU,IAAD,IAAS;AACrBA,IAAAA,IAAI,CAACC,SAAL,CAAeX,OAAf,CAAwBI,OAAD,IAAY;AACjC,yBAA8BG,OAA9B,EAAuC;AAAA;;AAAA,cAA3BK,MAA2B;AAAA,cAAnBC,KAAmB;AACzCA,QAAAA,KAAK,CAACV,QAAN,CAAeH,OAAf,CAAuBc,GAAG,IAAG;AACA,cAAIA,GAAG,KAAKV,OAAO,CAACW,UAApB,EAA+B;AAAC;AACvDN,YAAAA,QAAQ,CAACG,MAAD,CAAR,GAAmBH,QAAQ,CAACG,MAAD,CAAR,GAAmBH,QAAQ,CAACG,MAAD,CAAR,GAAmB,CAAtC,GAA0C,CAA7D;AACC;AAEF,SALL;AAMI;AACH,KATD;AAUA,GAXF;AAaAnB,EAAAA,cAAc,CAACO,OAAf,CAAuBgB,IAAI,IAAE;AAC5B,QAAIP,QAAQ,CAACO,IAAI,CAACtB,IAAN,CAAZ,EACCsB,IAAI,CAACrB,KAAL,GAAac,QAAQ,CAACO,IAAI,CAACtB,IAAN,CAArB;AACD,GAHD;AAIC,CA7BD;;AA+BA,MAAMuB,QAAQ,GAAIC,KAAD,IAAU;AAEzB,SAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAOtB,eAAe,CAACsB,KAAK,CAACrB,UAAP,EAAkBqB,KAAK,CAACC,UAAxB,CAAtB,EAELD,KAAK,CAACE,aAAN,CAAoB3B,cAApB,CAFK,EAGN,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE,GADX;AAEI,IAAA,MAAM,EAAE,GAFZ;AAGI,IAAA,IAAI,EAAEA,cAHV;AAII,IAAA,MAAM,EAAE;AACN4B,MAAAA,GAAG,EAAE,CADC;AACEC,MAAAA,KAAK,EAAE,EADT;AACaC,MAAAA,IAAI,EAAE,EADnB;AACuBC,MAAAA,MAAM,EAAE;AAD/B,KAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQI,oBAAC,aAAD;AAAe,IAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EASI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,EAUI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,EAWI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,EAYI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,EAaI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC,OAA9B;AAAsC,IAAA,MAAM,EAAC,SAA7C;AAAuD,IAAA,SAAS,EAAE;AAAEC,MAAAA,CAAC,EAAE;AAAL,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CAHM,CAAR;AAkBC,CApBH;;AAuBA,MAAMC,GAAG,GAAGC,KAAK,IAAI;AAEjB,SAAO;AACL9B,IAAAA,UAAU,EAAE8B,KAAK,CAACC,QADb;AAELC,IAAAA,MAAM,EAAEF,KAAK,CAACG,YAFT;AAGLX,IAAAA,UAAU,EAAEQ,KAAK,CAACR,UAHb,CAIL;;AAJK,GAAP;AAMH,CARD;;AAUA,MAAMY,GAAG,GAAGC,QAAQ,IAAI;AACtB,SAAO;AACLZ,IAAAA,aAAa,EAAGa,IAAD,IAAS;AACtBD,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAC,iBAAN;AAAyBC,QAAAA,OAAO,EAACF;AAAjC,OAAD,CAAR;AACD;AAHI,GAAP;AAKD,CAND;;AAQA,eAAehD,OAAO,CAACyC,GAAD,EAAKK,GAAL,CAAP,CAAiBd,QAAjB,CAAf,C,CAEA;AACA;AACA","sourcesContent":["// PlayGround for data\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\n\n\nconst lineDataObject = [\n{\n name: \"Amsterdams Finest\", total: 0\n},\n{\n name: \"Brooklyn baby\", total: 0\n},\n{\n name: \"Cali Cup\", total: 0\n},\n{\n name: \"Canna Cup\", total: 0\n},\n{\n name: \"Homegrown small-batch\", total: 0\n},\n{\n name: \"New Strains\", total: 0\n},\n{\n name: \"2019\", total: 0\n},\n]\n\nconst buildAnewObject = (categories,daily) => {\nlet sortedCategories = {}\ncategories.forEach((cat)=> {\n  sortedCategories[cat.category_name] = {products:[]}\n})\ncategories.forEach((cat)=> {\n  cat.products.forEach(product=>{\n    sortedCategories[cat.category_name].products.push(product.id)\n  })\n})\nlet entries = Object.entries(sortedCategories)\nlet lineData = {}\ndaily.forEach((sale)=> {\n  sale.purchases.forEach((product)=> {\n    for (const [strain, count] of entries) {\n  count.products.forEach(num=> {\n                               if (num === product.product_id){//Finds matches between daily sales and categories                        \n        lineData[strain] = lineData[strain] ? lineData[strain] + 1 : 1;\n        }\n        \n      })\n     }\n  })\n }\n)\nlineDataObject.forEach(line=>{\n if (lineData[line.name])\n  line.total = lineData[line.name]\n})\n}\n\nconst DataWork = (props)=> {\n\n  return (<div> {buildAnewObject(props.categories,props.daysOrders)} \n  \n    {props.saveDailyData(lineDataObject)}\n    <LineChart\n        width={600}\n        height={300}\n        data={lineDataObject}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"total\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n      </LineChart></div>)\n  }\n\n\nconst msp = state => {\n\n    return { \n      categories: state.category, \n      orders: state.latestOrders, \n      daysOrders: state.daysOrders,\n      // dailyData: state.dailyDatas\n     }\n}\n\nconst mdp = dispatch => {\n  return {\n    saveDailyData: (item)=> {\n      dispatch({type:\"SAVE_DAILY_DATA\", payload:item})\n    },\n  }\n}\n\nexport default connect(msp,mdp)(DataWork);\n\n//So now I have all my orders and a list of all my products..\n//Next thing to do is arrange the data so that I can get the category for each product sold.\n//Iterate over every sale in the last 24 hours..\n\n"]},"metadata":{},"sourceType":"module"}